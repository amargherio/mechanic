name: Build and push multi-arch container images

on:
  push:
    tags:
      - 'v*'

jobs:
  build-go-binaries:
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: build --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux-container-images:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    runs-on: ubuntu-latest
    needs: build-go-binaries
    
    env:
      target_container_registry: ghcr.io/amargherio/mechanic
      target_container_tag: ${{ github.ref }}
      distroless_runtime_image: mcr.microsoft.com/cbl-mariner/distroless/minimal:2.0-nonroot
      full_runtime_image: mcr.microsoft.com/cbl-mariner/base/core:2.0-nonroot
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get -y install podman buildah
      
      - name: Build multi-arch distroless images
        run: |
          podman manifest create ${{ target_container_registry}}/mechanic:${{ target_container_tag }}-distroless
          podman build --build-args RUNTIME_IMAGE=${{ distroless_runtime_image }} \
            --build-arg BIN_PATH=dist/mechanic_linux_amd64*/mechanic \
            --manifest ${{ target_container_registry}}/mechanic:${{ target_container_tag }}-distroless \
            --platform linux/amd64 \
            -f build/distroless.Dockerfile .

          podman build --build-args RUNTIME_IMAGE=${{ distroless_runtime_image }} \
            --build-arg BIN_PATH=dist/mechanic_linux_arm64/mechanic \
            --manifest ${{ target_container_registry}}/mechanic:${{ target_container_tag }}-distroless \
            --platform linux/arm64 \
            -f build/distroless.Dockerfile .

      - name: Build multi-arch base images
        run: |
          podman manifest create ${{ target_container_registry}}/mechanic:${{ target_container_tag }}

          podman build --build-args RUNTIME_IMAGE=${{ full_runtime_image }} \
            --build-arg BIN_PATH=dist/mechanic_linux_amd64*/mechanic \
            --manifest ${{ target_container_registry}}/mechanic:${{ target_container_tag }} \
            --platform linux/amd64 \
            -f build/distroless.Dockerfile .

          podman build --build-args RUNTIME_IMAGE=${{ full_runtime_image }} \
            --build-arg BIN_PATH=dist/mechanic_linux_arm64/mechanic \
            --manifest ${{ target_container_registry}}/mechanic:${{ target_container_tag }} \
            --platform linux/arm64 \
            -f build/distroless.Dockerfile .

      - name: Push images to registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | podman login --username ${{ secrets.CONTAINER_REGISTRY_USERNAME }} --password-stdin ${{ target_container_registry}}

          podman manifest push ${{ target_container_registry}}/mechanic:${{ target_container_tag }}-distroless
          podman manifest push ${{ target_container_registry}}/mechanic:${{ target_container_tag }}
  build-windows-containers:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    runs-on: windows-latest
    needs: build-go-binaries

    env:
      target_container_registry: ghcr.io/amargherio/mechanic
      target_container_tag: ${{ github.ref }}
      windows_runtime_image: mcr.microsoft.com/windows/nanoserver:ltsc2019
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        run: |
          Invoke-WebRequest -UseBasicParsing -Uri https://download.docker.com/win/static/stable/x86_64/docker-27.3.1.zip -OutFile docker-27.3.1.zip
          Expand-Archive docker-27.3.1.zip -DestinationPath $env:ProgramFiles
          $env:PATH += ";$env:ProgramFiles\docker"
          Start-Service Docker
          docker --version

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Windows images
        run: |
          docker buildx create --use
          docker buildx build \
            --platform windows/amd64 \
            --build-arg BIN_PATH=dist/mechanic_windows_amd64*/mechanic \
            --build-arg RUNTIME_IMAGE=${{ windows_runtime_image }} \
            --tag ${{ target_container_registry}}/mechanic:${{ target_container_tag }}-windows \
            -f build/windows.Dockerfile .
          
          docker buildx build \
            --platform windows/arm64 \
            --build-arg BIN_PATH=dist/mechanic_windows_arm64/mechanic \
            --build-arg RUNTIME_IMAGE=${{ windows_runtime_image }} \
            --tag ${{ target_container_registry}}/mechanic:${{ target_container_tag }}-windows \
            -f build/windows.Dockerfile .
          
      - name: Log in to container registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login --username ${{ secrets.CONTAINER_REGISTRY_USERNAME }} --password-stdin ${{ target_container_registry}}

      - name: Push images to registry
        run: |
          podman manifest push ${{ target_container_registry}}/mechanic:${{ target_container_tag }}-windows
