name: Build and push multi-arch container images

on:
  push:
    tags:
      - 'v*'

jobs:
  build-go-binaries:
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: build --snapshot --clean --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux-container-images:
    permissions:
      contents: read
      attestations: write
      id-token: write

    runs-on: ubuntu-latest
    needs: build-go-binaries
    
    env:
      target.container_registry: ghcr.io/amargherio/mechanic
      target.container_tag: ${{ github.ref }}
      var.distroless_runtime_image: mcr.microsoft.com/cbl-mariner/distroless/minimal:2.0-nonroot
      var.full_runtime_image: mcr.microsoft.com/cbl-mariner/base/core:2.0-nonroot
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get -y install podman buildah
      
      - name: Build multi-arch distroless images
        run: |
          podman manifest create ${{ target.container_registry}}/mechanic:${{ target.container_tag }}-distroless
          podman build --build-args RUNTIME_IMAGE=${{ var.distroless_runtime_image }} \
            --build-arg BIN_PATH=dist/mechanic_linux_amd64*/mechanic \
            --manifest ${{ target.container_registry}}/mechanic:${{ target.container_tag }}-distroless \
            --platform linux/amd64 \
            -f build/distroless.Dockerfile .

          podman build --build-args RUNTIME_IMAGE=${{ var.distroless_runtime_image }} \
            --build-arg BIN_PATH=dist/mechanic_linux_arm64/mechanic \
            --manifest ${{ target.container_registry}}/mechanic:${{ target.container_tag }}-distroless \
            --platform linux/arm64 \
            -f build/distroless.Dockerfile .

      - name: Build multi-arch base images
        run: |
          podman manifest create ${{ target.container_registry}}/mechanic:${{ target.container_tag }}

          podman build --build-args RUNTIME_IMAGE=${{ var.full_runtime_image }} \
            --build-arg BIN_PATH=dist/mechanic_linux_amd64*/mechanic \
            --manifest ${{ target.container_registry}}/mechanic:${{ target.container_tag }} \
            --platform linux/amd64 \
            -f build/distroless.Dockerfile .

          podman build --build-args RUNTIME_IMAGE=${{ var.full_runtime_image }} \
            --build-arg BIN_PATH=dist/mechanic_linux_arm64/mechanic \
            --manifest ${{ target.container_registry}}/mechanic:${{ target.container_tag }} \
            --platform linux/arm64 \
            -f build/distroless.Dockerfile .
  build-windows-containers:
    permissions:
      contents: read
      attestations: write
      id-token: write

    runs-on: windows-latest
    needs: build-go-binaries

    env:
      target.container_registry: ghcr.io/amargherio/mechanic
      target.container_tag: ${{ github.ref }}
      var.windows_runtime_image: mcr.microsoft.com/windows/nanoserver:1809
    
    steps:
      - name: Build Windows images
        run: |
          podman manifest create ${{ target.container_registry}}/mechanic:${{ target.container_tag }}-windows
          
          podman build --build-args RUNTIME_IMAGE=${{ var.windows_runtime_image }} \
            --build-arg BIN_PATH=dist/mechanic_windows_amd64*/mechanic \
            --manifest ${{ target.container_registry}}/mechanic:${{ target.container_tag }} \
            --platform windows/amd64 \
            -f build/distroless.Dockerfile .

          podman build --build-args RUNTIME_IMAGE=${{ var.windows_runtime_image }} \
            --build-arg BIN_PATH=dist/mechanic_windows_arm/mechanic \
            --manifest ${{ target.container_registry}}/mechanic:${{ target.container_tag }} \
            --platform windows/arm64 \
            -f build/distroless.Dockerfile .
          
      - name: Log in to container registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | podman login --username ${{ secrets.CONTAINER_REGISTRY_USERNAME }} --password-stdin ${{ target.container_registry}}

  push-container-images:
    permissions:
      packages: write
      attestations: write
      id-token: write

    runs-on: ubuntu-latest
    needs: build-container-images
    steps:
      - name: Push images to registry
        run: |
          podman manifest push ${{ target.container_registry}}/mechanic:${{ target.container_tag }}-distroless
          podman manifest push ${{ target.container_registry}}/mechanic:${{ target.container_tag }}
          podman manifest push ${{ target.container_registry}}/mechanic:${{ target.container_tag }}-windows