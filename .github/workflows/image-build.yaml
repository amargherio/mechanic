name: Build and push multi-arch container images

on:
  push:
    tags:
      - 'v*'

jobs:
  build-go-binaries:
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: build --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Go binaries
        uses: actions/upload-artifact@v4
        with:
          name: go-binaries
          path: dist/

  build-linux-container-images:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    runs-on: ubuntu-latest
    needs: build-go-binaries
    
    env:
      target_container_registry: ghcr.io/amargherio
      target_container_tag: $(echo ${{ github.ref }} | sed 's/refs\/tags\///')
      distroless_runtime_image: mcr.microsoft.com/cbl-mariner/distroless/minimal:2.0-nonroot
      full_runtime_image: mcr.microsoft.com/cbl-mariner/base/core:2.0-nonroot
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: go-binaries
          path: dist

      - name: Fix file permissions for executables
        run: |
          chmod +x dist/mechanic_linux_*/mechanic

      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get -y install podman buildah
      
      - name: Build multi-arch distroless images
        run: |
          podman manifest create ${{ env.target_container_registry}}/mechanic:${{ env.target_container_tag }}-distroless
          podman build --build-arg RUNTIME_IMAGE=${{ env.distroless_runtime_image }} \
            --build-arg BIN_PATH=./dist/mechanic_linux_amd64*/mechanic \
            --manifest ${{ env.target_container_registry}}/mechanic:${{ env.target_container_tag }}-distroless \
            --platform linux/amd64 \
            -f build/distroless.Dockerfile .

          podman build --build-arg RUNTIME_IMAGE=${{ env.distroless_runtime_image }} \
            --build-arg BIN_PATH=dist/mechanic_linux_arm64/mechanic \
            --manifest ${{ env.target_container_registry}}/mechanic:${{ env.target_container_tag }}-distroless \
            --platform linux/arm64 \
            -f build/distroless.Dockerfile .

      - name: Build multi-arch core images
        run: |
          podman manifest create ${{ env.target_container_registry}}/mechanic:${{ env.target_container_tag }}

          podman build --build-arg RUNTIME_IMAGE=${{ env.full_runtime_image }} \
            --build-arg BIN_PATH=dist/mechanic_linux_amd64*/mechanic \
            --manifest ${{ env.target_container_registry}}/mechanic:${{ env.target_container_tag }} \
            --platform linux/amd64 \
            -f build/distroless.Dockerfile .

          podman build --build-arg RUNTIME_IMAGE=${{ env.full_runtime_image }} \
            --build-arg BIN_PATH=dist/mechanic_linux_arm64/mechanic \
            --manifest ${{ env.target_container_registry}}/mechanic:${{ env.target_container_tag }} \
            --platform linux/arm64 \
            -f build/distroless.Dockerfile .

      - name: Log in to container registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | podman login --username ${{ secrets.CONTAINER_REGISTRY_USERNAME }} --password-stdin ${{ env.target_container_registry}}       

      - name: Push images to registry
        run: |
          set -x
          podman manifest push ${{ env.target_container_registry}}/mechanic:${{ env.target_container_tag }}-distroless ${{ env.target_container_registry }}/mechanic:${{ env.target_container_tag}}-distroless
          podman manifest push ${{ env.target_container_registry}}/mechanic:${{ env.target_container_tag }} ${{ env.target_container_registry}}/mechanic:${{ env.target_container_tag }}

  build-windows-2022-containers:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    runs-on: windows-2022
    needs: build-go-binaries

    env:
      target_container_registry: ghcr.io/amargherio
      target_container_tag: $(echo ${{ github.ref }} | sed 's/refs\/tags\///')
      windows_runtime_image: mcr.microsoft.com/windows/nanoserver:ltsc2022

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: go-binaries
          path: dist

      - name: Fix file permissions for executables
        run: |
          chmod +x dist/mechanic_windows_*/mechanic
                
      - name: Log in to container registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login --username ${{ secrets.CONTAINER_REGISTRY_USERNAME }} --password-stdin ${{ env.target_container_registry}}

      - name: Build Windows 2022 images
        run: |
          docker build `
            --platform windows/amd64 `
            --build-arg BIN_PATH=dist/mechanic_windows_amd64*/mechanic.exe `
            --build-arg RUNTIME_IMAGE=${{ env.windows_runtime_image }} `
            --tag ${{ env.target_container_registry}}/mechanic:${{ env.target_container_tag }}-windows2022-amd64 `
            -f build/windows.Dockerfile .

      - name: Push images to registry
        run: |
          docker push ${{ env.target_container_registry}}/mechanic:${{ env.target_container_tag }}-windows2022-amd64