// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/imds/imds.go
//
// Generated by this command:
//
//	mockgen -destination pkg/imds/mock_imds.go -package imds -source pkg/imds/imds.go IMDS
//

// Package imds is a generated GoMock package.
package imds

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIMDS is a mock of IMDS interface.
type MockIMDS struct {
	ctrl     *gomock.Controller
	recorder *MockIMDSMockRecorder
}

// MockIMDSMockRecorder is the mock recorder for MockIMDS.
type MockIMDSMockRecorder struct {
	mock *MockIMDS
}

// NewMockIMDS creates a new mock instance.
func NewMockIMDS(ctrl *gomock.Controller) *MockIMDS {
	mock := &MockIMDS{ctrl: ctrl}
	mock.recorder = &MockIMDSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMDS) EXPECT() *MockIMDSMockRecorder {
	return m.recorder
}

// QueryIMDS mocks base method.
func (m *MockIMDS) QueryIMDS(ctx context.Context) (ScheduledEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryIMDS", ctx)
	ret0, _ := ret[0].(ScheduledEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIMDS indicates an expected call of QueryIMDS.
func (mr *MockIMDSMockRecorder) QueryIMDS(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIMDS", reflect.TypeOf((*MockIMDS)(nil).QueryIMDS), ctx)
}
